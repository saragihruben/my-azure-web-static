"use strict";

exports.__esModule = true;
exports.xhrLoader = exports.timeout = exports.imageLoader = exports.combineCancel = void 0;
var _unfetch = require("./unfetch");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // There is an issue with cancelable interface
// It is not obvious that
// `image(src)` has `cancel` function
// but `image(src).then()` doesn't
/**
 * returns new "promise" with cancel function combined
 *
 * @param {Promise} p1 - first "promise" with cancel
 * @param {Promise} p2 - second "promise" with cancel
 * @returns {Promise} - new "promise" with cancel
 */
const combineCancel = (p1, p2) => {
  if (!p2) return p1;
  const result = p1.then(x => x, x => x);
  result.cancel = () => {
    p1.cancel();
    p2.cancel();
  };
  return result;
};
exports.combineCancel = combineCancel;
const timeout = threshold => {
  let timerId;
  const result = new Promise(resolve => {
    timerId = setTimeout(resolve, threshold);
  });
  result.cancel = () => {
    // there is a bug with cancel somewhere in the code
    // if (!timerId) throw new Error('Already canceled')
    clearTimeout(timerId);
    timerId = undefined;
  };
  return result;
};

// Caveat: image loader can not cancel download in some browsers
exports.timeout = timeout;
const imageLoader = src => {
  let img = new Image();
  const result = new Promise((resolve, reject) => {
    img.onload = resolve;
    // eslint-disable-next-line no-multi-assign
    img.onabort = img.onerror = () => reject({});
    img.src = src;
  });
  result.cancel = () => {
    if (!img) throw new Error('Already canceled');
    // eslint-disable-next-line no-multi-assign
    img.onload = img.onabort = img.onerror = undefined;
    img.src = '';
    img = undefined;
  };
  return result;
};

// Caveat: XHR loader can cause errors because of 'Access-Control-Allow-Origin'
// Caveat: we still need imageLoader to do actual decoding,
// but if images are uncachable this will lead to two requests
exports.imageLoader = imageLoader;
const xhrLoader = (url, options) => {
  let controller = new _unfetch.UnfetchAbortController();
  const signal = controller.signal;
  const result = new Promise((resolve, reject) => (0, _unfetch.unfetch)(url, _objectSpread(_objectSpread({}, options), {}, {
    signal
  })).then(response => {
    if (response.ok) {
      response.blob().then(() => imageLoader(url)).then(resolve);
    } else {
      reject({
        status: response.status
      });
    }
  }, reject));
  result.cancel = () => {
    if (!controller) throw new Error('Already canceled');
    controller.abort();
    controller = undefined;
  };
  return result;
};

// Caveat: AbortController only supported in Chrome 66+
// Caveat: we still need imageLoader to do actual decoding,
// but if images are uncachable this will lead to two requests
// export const fetchLoader = (url, options) => {
//   let controller = new AbortController()
//   const signal = controller.signal
//   const result = new Promise((resolve, reject) =>
//     fetch(url, {...options, signal}).then(response => {
//       if (response.ok) {
//         options && options.onMeta && options.onMeta(response.headers)
//         response
//           .blob()
//           .then(() => imageLoader(url))
//           .then(resolve)
//       } else {
//         reject({status: response.status})
//       }
//     }, reject),
//   )
//   result.cancel = () => {
//     if (!controller) throw new Error('Already canceled')
//     controller.abort()
//     controller = undefined
//   }
//   return result
// }
exports.xhrLoader = xhrLoader;